<?php

namespace Main\CatalogBundle\Entity\Repository;
use Main\CatalogBundle\Entity\ProductGroup;

/**
 * GroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function getProductByGroupAlias($param,$em){
        $data = $em->getRepository('MainCatalogBundle:ProductGroup')->findOneByAlias($param["alias"]);
        $url = "";      
        foreach($param as $key=>$val){
            if($key != "alias" && $key != "first"){
                $group = $em->getRepository('MainCatalogBundle:ProductGroup')->findOneByAlias($val);
                if (!$group) {
                    throw $this->createNotFoundException('The product does not exist');
                }
            }
            $url .=  "/".$val;
        }
        
        $product = $data->getProduct();
        
        foreach($product as $p){
            $result[] = array(
                        "detailUrl"   => $url."/".$p->getAlias(),
                        "name"        =>$p->getName(),
                        "img"         =>$p->getImages(),
                        "price"       =>$p->getPrice(),
                        "id"          =>$p->getId(),
                        "description" =>$p->getDescription(),
                        "parentGroup" =>$p->getParentGroup()
                        
                );
        }
      
        return $result;
    }
    
    public function getRecommendedItem($em,$user,$product,$group = null){
        if($product != null){
            $currentGroup = $em->getRepository('MainCatalogBundle:ProductGroup')->find($product->getParentGroup()->getId());
            $recommendedGroup = $currentGroup->getMeRecommended();
        } else {
            $recommendedGroup = $group->getMeRecommended();
        }

        $qb = $em->getRepository('MainCatalogBundle:BasketItem')->createQueryBuilder('p');
            $qb->select('p');
            $qb->where('p.status = :status');
            $qb->andWhere('p.user = :user');
            $qb->andWhere('p.createdAt > :creat'); 
            $qb->setParameter('status', -1);  
            $qb->setParameter('user', $user); 
            $qb->setParameter('creat',  new \DateTime('-12 hours')); 
            $list = $qb->getQuery()->getResult();
        $arr = array();
        foreach($list as $l){
            $arr[] = $l->getProduct()->getId();     
        }    
             
        $prod = $url = array();
        if(count($recommendedGroup) > 0){
            foreach($recommendedGroup as $key=>$val){
                $prod[] = $em->getRepository('MainCatalogBundle:Product')->getProduct($em,$val,$user,'parentGroup',$arr);    
            }
        } 
       // echo count($prod);exit;
        return $prod;
    }
    
    public function getProduct($em,$id,$user,$col=null,$not = array()){
      
        $col = ($col == null)?"id":$col;
        $qb =$em->getRepository('MainCatalogBundle:Product')
            ->createQueryBuilder('p');
            $qb->select('p');
            $qb->where('p.'.$col.' = :val');
            $qb->andWhere('p.isIncludedInMenu = 1 OR p.type = :typ');
            
            if(count($not) > 0){    
                $qb->andWhere('p.id NOT IN (:ids)');
                $qb->setParameter('ids', $not);
            }    
            
            $qb->setParameter('val', $id);
            $qb->setParameter('typ', 'modifier');
            $qb->setMaxResults(1);
        $product = $qb->getQuery()->getOneOrNullResult();
            

        if($product){
            $dicounts = $em->getRepository('MainCatalogBundle:ProductDiscount')->getTrue($product,$em,$user);
            $curPrice = $product->getPrice();
            $product->setPriceWithOutDiscount($curPrice);

            if($dicounts){
                foreach($dicounts as $dicount){
                    $product->addTrueDiscount($dicount);
                    $product->setDiscountValue($dicount->getPercent()) ;    
                }
                $product->setIsPriceDiscount(true);
            }
            $product->setHref($this->buildHref($product));

            return $product;
        }        
        return null;  
    }
   
    protected function buildHref($product){
        $link = $product->getAlias();
        $parent = $product->getParentGroup();
        if($parent){
            do{
                if(!$parent->getHideAliasByURL()){
                    $link = $parent->getAlias()."/".$link;
                }
                $parent = $parent->getParentGroup();
            } while ($parent != null);
        }
        return "/catalog/".$link;                
    }
    
    
    public function getProductList($em,ProductGroup $group, $limit = null, $sort = null, $user = null, array $notIn = null, array $In = null){
        $list = $em->getRepository('MainCatalogBundle:Product')
                        ->createQueryBuilder('p')
                        ->select('p')
                        ->where('p.parentGroup = :id')
                        ->andWhere('p.isIncludedInMenu = 1')
                        ->setParameter('id', $group->getId()); 
        if($limit != null){                                 
            $list->setMaxResults($limit);
        }    
        if($sort != null){
            $list ->orderBy('p.order_by', $sort);
        }              
        $list = $list->getQuery()->getResult();
        $result = $bItemList = array();
        
        $basketItemList = $em->getRepository('MainCatalogBundle:BasketItem')->findBy(array('user'=>$user));
        
        foreach($basketItemList as $item){
            if(isset($bItemList[$item->getProduct()->getId()])){
                $bItemList[$item->getProduct()->getId()] += $item->getStatus();     
            } else {
                $bItemList[$item->getProduct()->getId()] =  $item->getStatus();
            }   
        }
        
        foreach($list as $product){
            $dicounts = $em->getRepository('MainCatalogBundle:ProductDiscount')->getTrue($product,$em,$user);
            if($dicounts){
                $curPrice = $product->getPrice();
                $product->setPriceWithOutDiscount($curPrice);
                foreach($dicounts as $dicount){
                    $product->addTrueDiscount($dicount);
                    $product->setDiscountValue($dicount->getPercent()) ;    
                }
                $product->setIsPriceDiscount(true);
            }
            
            if(!$product->getIsPriceDiscount()){
                if(isset($bItemList[$product->getId()])){
                    $result[$product->getOrderBy() + $bItemList[$product->getId()]*100] = $product; 
                }else{
                     $result[$product->getOrderBy()] = $product;
                } 
            }else{
                foreach($result as $key=>$val){
                    $res[$key+1] = $val;
                }
                $res[$product->getOrderBy() + $bItemList[$product->getId()]*100] = $product;
                
                $result = $res;
            }   
        }
        krsort($result);
        return $result;                 
    }
}
