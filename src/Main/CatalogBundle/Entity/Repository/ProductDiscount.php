<?php

namespace Main\CatalogBundle\Entity\Repository;
use Main\CatalogBundle\Entity\ProductGroup;
use Main\CatalogBundle\Entity\Product;

/**
 * GroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductDiscount extends \Doctrine\ORM\EntityRepository
{
    protected function isSetDiscount($product,$disc) {
        $list = $product->getTrueDiscount();
        if($list){
            foreach($list as $l){
                if($l == $disc){
                    return true;
                }
            }
        }
        return false;
    }
    
    public function getTrue(Product $product,$em, $user){
        $dicounts = $em->getRepository('MainCatalogBundle:ProductDiscount')->findBy(array('product'=>$product));
       
        $di = null;
        foreach($dicounts as $val){
            $conditions = $val->getCondition();
            $exit = $this->isSetDiscount($product,$val);
            
            
            foreach($conditions as $cond){
               
                if($cond->getFuncId() == 1){
                    if(!$this->condTimeBetween($cond->getTimeStart(),$cond->getTimeStop(),$product,$cond)){
                    
                        $exit = true;
                        break;  
                    }
                }  
                
                if($cond->getFuncId() == 2){
                    if(!$this->condBuyCountOnDate($em,$cond->getTimeStart(),$cond->getTimeStop(),$product,$cond)){
                        $exit = true;
                        break;  
                    }
                }  
                
                if($cond->getFuncId() == 3){
                    if(!$this->condIsProductCountInBasket($em,$product,$cond,$user)){
                        $exit = true;
                        break;  
                    }
                } 
            } 
            if(!$exit){      
                $di[] = $val;
            }   
        }

        return $di;
    }
    
    public function condIsProductCountInBasket($em, $product,$cond,$user){

        $item = $em->getRepository('MainCatalogBundle:BasketItem')->findOneBy(array("isDiscount"=>1,"product"=>$product,'user'=>$user,'status'=>0));
        $product->setMaxBasketCount($cond->getBuyCount());
        
        if(!isset($item) || $item->getCount() < $cond->getBuyCount()){
            return true;
        } 
        return false;   
    }

    public function condBuyCountOnDate($em, $start,$stop,$product,$cond){
        $current    = time('Y-m-d H:i:s');
        $count = 0;
        $time_start = strtotime($start->format('Y-m-d H:i:s'));
        $time_stop  = strtotime($stop->format('Y-m-d H:i:s'));

        if($cond->getRepeat() == 1){
            $today = date('Y-m-d');  
            
            $time_start = strtotime($start->format($today.' H:i:s'));
            $time_stop  = strtotime($stop->format($today.' H:i:s'));              
        }
        $RemainderItem = $cond->getBuyCount();
        
        $item = $em->getRepository('MainCatalogBundle:BasketItem')
                        ->createQueryBuilder('p')
                        ->select('p')
                        ->where('p.product = :product')
                        ->andWhere('p.status IN (1,0)')
                        ->andWhere('p.isDiscount = 1')
                        ->andWhere('p.createdAt > :start')
                        ->andWhere('p.createdAt < :stop')
                        ->setParameter('product', $product)
                        ->setParameter('start', date('Y-m-d H:i:s',$time_start))
                        ->setParameter('stop', date('Y-m-d H:i:s',$time_stop))
                        ->getQuery()->getResult();
        foreach($item as $val){
            $count += $val->getCount();
        }
        
        $product->setRemainderItem($RemainderItem - $count);
            
        if($product->getMaxBasketCount() <= 0){
            $product->setMaxBasketCount($cond->getBuyCount());
        }    
            
        if($product->getRemainderItem() > 0){
            $product->setTimeUntilTheEnd($time_stop-$current);
            return true;    
        }else{
            return false;
        }                
    }
    
    public function condTimeBetween($start,$stop,$product,$cond){
  
        $current    = time('Y-m-d H:i:s');
       

        $time_start = strtotime($start->format('Y-m-d H:i:s'));
        $time_stop  = strtotime($stop->format('Y-m-d H:i:s'));
      //  echo  $time_start."<".$current."<".$time_stop;
        if($cond->getRepeat() == 1){
            $today = date('Y-m-d');  
            
            $time_start = strtotime($start->format($today.' H:i:s'));
            $time_stop  = strtotime($stop->format($today.' H:i:s'));              
        }
       // echo 0;
        if($current < $time_stop && $current > $time_start){
            $product->setTimeUntilTheEnd($time_stop-$current);
         //   echo '1';
            return true;    
        }else{
         //   echo $current .'<'. $time_stop ." ". $current .'>'. $time_start."==";
            return false;
            
        }
            
    }
    
    
}
